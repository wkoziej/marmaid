name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main, test ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npx tsc --noEmit
    
    - name: Run linter
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:unit -- --run --reporter=verbose
    
    - name: Run integration tests
      run: npm run test:integration -- --run --reporter=verbose
    
    - name: Run tests with coverage
      run: npm run test:coverage -- --run
      
    - name: Check coverage threshold
      run: |
        # Run coverage and extract percentage
        npm run test:coverage -- --run --reporter=verbose 2>&1 | tee coverage_output.log
        
        # Extract coverage percentage from vitest output
        COVERAGE=$(grep -oE '[0-9]+\.[0-9]+%' coverage_output.log | head -1 | sed 's/%//')
        
        if [ -z "$COVERAGE" ]; then
          echo "‚ö†Ô∏è  Could not determine coverage percentage"
          COVERAGE=0
        fi
        
        echo "üìä Test Coverage: $COVERAGE%"
        
        # Check if coverage meets threshold (70% for now)
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below 70% threshold"
          exit 1
        fi
        echo "‚úÖ Coverage $COVERAGE% meets threshold"
    
    - name: Security audit
      run: npm audit --audit-level moderate
      continue-on-error: false
    
    - name: Check bundle size
      run: |
        npm run build
        BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
        echo "üì¶ Bundle size: $BUNDLE_SIZE"
        # Alert if bundle is larger than 5MB
        if [[ $(du -s dist/ | cut -f1) -gt 5120 ]]; then
          echo "‚ö†Ô∏è  Bundle size exceeds 5MB limit"
          exit 1
        fi
    
    - name: Install Playwright browsers
      run: npx playwright install chromium --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

  deploy-test:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/test' && github.event_name == 'push'
    
    defaults:
      run:
        working-directory: ./frontend

    environment:
      name: test
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure test environment
      run: cp .env.test .env.production
    
    - name: Build for test
      run: npm run build
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './frontend/dist'
        
    - name: Deploy to GitHub Pages (Test)
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Smoke test - Health check
      run: |
        URL="${{ steps.deployment.outputs.page_url }}"
        echo "üîç Testing deployment at: $URL"
        
        # Test if site is reachable
        if curl -f -s "$URL" > /dev/null; then
          echo "‚úÖ Site is reachable"
        else
          echo "‚ùå Site is not reachable"
          exit 1
        fi
        
        # Test if auth page loads
        if curl -f -s "$URL" | grep -q "auth\|login\|sign"; then
          echo "‚úÖ Auth functionality detected"
        else
          echo "‚ö†Ô∏è  Auth functionality not detected in HTML"
        fi

  deploy-production:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    defaults:
      run:
        working-directory: ./frontend

    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './frontend/dist'
        
    - name: Deploy to GitHub Pages (Production)
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Production smoke test
      run: |
        URL="${{ steps.deployment.outputs.page_url }}"
        echo "üöÄ Testing PRODUCTION deployment at: $URL"
        
        # Test if site is reachable
        if curl -f -s "$URL" > /dev/null; then
          echo "‚úÖ Production site is reachable"
        else
          echo "‚ùå Production site is not reachable"
          exit 1
        fi
        
        # Test critical functionality
        if curl -f -s "$URL" | grep -q "auth\|login\|sign"; then
          echo "‚úÖ Production auth functionality detected"
        else
          echo "‚ùå Production auth functionality missing - CRITICAL"
          exit 1
        fi
        
        echo "üéâ Production deployment successful!"