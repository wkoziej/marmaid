# ABOUTME: Automatic rollback workflow triggered on deployment failures
# ABOUTME: Monitors deployments and initiates rollback procedures when issues are detected
name: Auto Rollback on Failure

on:
  workflow_run:
    workflows: ["Deploy to GitHub Pages"]
    types:
      - completed

jobs:
  check-deployment-health:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      health_status: ${{ steps.health-check.outputs.status }}
      environment: ${{ steps.determine-env.outputs.environment }}
    
    steps:
    - name: Determine Environment
      id: determine-env
      run: |
        if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "url=https://marmaid.pl/" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.workflow_run.head_branch }}" == "test" ]]; then
          echo "environment=test" >> $GITHUB_OUTPUT
          echo "url=https://marmaid.pl/" >> $GITHUB_OUTPUT
        else
          echo "environment=unknown" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Wait for Deployment Propagation
      run: sleep 60  # Wait 1 minute for GitHub Pages to propagate
    
    - name: Post-Deployment Health Check
      id: health-check
      run: |
        URL="${{ steps.determine-env.outputs.url }}"
        ENV="${{ steps.determine-env.outputs.environment }}"
        
        echo "üîç Checking deployment health for $ENV at $URL"
        
        # Check if site is reachable (retry up to 3 times)
        for i in {1..3}; do
          if curl -f -s --connect-timeout 10 --max-time 30 "$URL" > /dev/null; then
            echo "‚úÖ Site is reachable (attempt $i)"
            SITE_UP=true
            break
          else
            echo "‚ùå Site unreachable (attempt $i/3)"
            SITE_UP=false
            if [ $i -lt 3 ]; then
              sleep 30
            fi
          fi
        done
        
        if [[ "$SITE_UP" != "true" ]]; then
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "reason=site_unreachable" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check response time
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$URL")
        echo "‚è±Ô∏è  Response time: ${RESPONSE_TIME}s"
        
        if (( $(echo "$RESPONSE_TIME > 10.0" | bc -l) )); then
          echo "‚ö†Ô∏è  Response time too slow: ${RESPONSE_TIME}s"
          echo "status=degraded" >> $GITHUB_OUTPUT
          echo "reason=slow_response" >> $GITHUB_OUTPUT
        else
          echo "status=healthy" >> $GITHUB_OUTPUT
        fi
        
        # Check for critical content
        if ! curl -s "$URL" | grep -q "Marmaid\|auth\|login"; then
          echo "‚ùå Critical content missing"
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "reason=content_missing" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ Post-deployment health check passed"

  auto-rollback:
    runs-on: ubuntu-latest
    needs: check-deployment-health
    if: failure() || needs.check-deployment-health.outputs.health_status == 'unhealthy'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for rollback
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions (Auto Rollback)"
        git config --global user.email "actions@github.com"
    
    - name: Determine Rollback Strategy
      id: rollback-strategy
      run: |
        ENV="${{ needs.check-deployment-health.outputs.environment }}"
        BRANCH=""
        
        if [[ "$ENV" == "production" ]]; then
          BRANCH="main"
          echo "strategy=production_rollback" >> $GITHUB_OUTPUT
        elif [[ "$ENV" == "test" ]]; then
          BRANCH="test" 
          echo "strategy=test_rollback" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Unknown environment for rollback"
          exit 1
        fi
        
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT
    
    - name: Create Emergency Backup
      run: |
        BACKUP_BRANCH="auto-backup-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BACKUP_BRANCH"
        git push origin "$BACKUP_BRANCH"
        
        echo "üóÑÔ∏è  Emergency backup created: $BACKUP_BRANCH"
        
        # Return to target branch
        git checkout "${{ steps.rollback-strategy.outputs.branch }}"
    
    - name: Find Last Known Good Commit
      id: find-good-commit
      run: |
        BRANCH="${{ steps.rollback-strategy.outputs.branch }}"
        
        # Look for last commit that was likely successful
        # Priority: commits with "feat:", "fix:", or merge commits
        GOOD_COMMIT=$(git log --oneline --grep="feat:\|fix:\|Merge" -1 --format="%H" HEAD~1)
        
        if [[ -z "$GOOD_COMMIT" ]]; then
          # Fallback to previous commit
          GOOD_COMMIT="HEAD~1"
          echo "‚ö†Ô∏è  Using fallback: HEAD~1"
        fi
        
        echo "good_commit=$GOOD_COMMIT" >> $GITHUB_OUTPUT
        echo "üìç Rolling back to: $GOOD_COMMIT"
        
        # Show what we're rolling back to
        git log --oneline -1 "$GOOD_COMMIT"
    
    - name: Execute Rollback
      run: |
        BRANCH="${{ steps.rollback-strategy.outputs.branch }}"
        GOOD_COMMIT="${{ steps.find-good-commit.outputs.good_commit }}"
        ENV="${{ steps.rollback-strategy.outputs.environment }}"
        
        echo "üö® EXECUTING AUTO ROLLBACK"
        echo "Environment: $ENV"
        echo "Branch: $BRANCH" 
        echo "Rolling back to: $GOOD_COMMIT"
        
        # Reset to last good commit
        git reset --hard "$GOOD_COMMIT"
        
        # Force push to trigger redeployment
        git push --force-with-lease origin "$BRANCH"
        
        echo "‚úÖ Rollback executed - redeployment triggered"
    
    - name: Create Rollback Issue
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Auto Rollback Executed - ' + '${{ steps.rollback-strategy.outputs.environment }}',
            body: `
              ## üö® Automatic Rollback Executed
              
              **Environment:** ${{ steps.rollback-strategy.outputs.environment }}
              **Trigger:** Deployment health check failure
              **Time:** ${new Date().toISOString()}
              
              ### Details
              - **Branch:** ${{ steps.rollback-strategy.outputs.branch }}
              - **Rolled back to:** ${{ steps.find-good-commit.outputs.good_commit }}
              - **Reason:** ${{ needs.check-deployment-health.outputs.health_status || 'Health check failure' }}
              - **Workflow Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              ### Next Steps
              1. Investigate the root cause of the deployment failure
              2. Fix the issues in a new branch/PR
              3. Test thoroughly before deploying again
              4. Close this issue once resolved
              
              ### Recovery Information
              - Emergency backup branch created during rollback process
              - Original failing commit preserved in git history
              - Health monitoring will continue to track system status
              
              **This rollback was executed automatically to maintain system stability.**
            `,
            labels: ['bug', 'critical', 'auto-rollback']
          })
          
          console.log('Created rollback issue:', issue.data.html_url)
    
    - name: Send Slack/Discord Notification (Template)
      run: |
        echo "üîî ROLLBACK NOTIFICATION"
        echo "Environment: ${{ steps.rollback-strategy.outputs.environment }}"
        echo "Status: Automatic rollback executed"
        echo "Time: $(date)"
        echo ""
        echo "This is where you would send alerts to:"
        echo "- Slack webhook"
        echo "- Discord webhook" 
        echo "- Email notifications"
        echo "- PagerDuty/OpsGenie"
        echo ""
        echo "Configure webhooks in repository secrets for actual notifications"

  verify-rollback:
    runs-on: ubuntu-latest
    needs: [auto-rollback, check-deployment-health]
    if: always() && needs.auto-rollback.result == 'success'
    
    steps:
    - name: Wait for Rollback Deployment
      run: sleep 120  # Wait 2 minutes for rollback to deploy
    
    - name: Verify Rollback Success
      run: |
        URL="https://marmaid.pl/"
        ENV="${{ needs.check-deployment-health.outputs.environment }}"
        
        echo "üîç Verifying rollback success for $ENV"
        
        # Check if rolled back site is healthy
        for i in {1..3}; do
          if curl -f -s --connect-timeout 10 --max-time 30 "$URL" > /dev/null; then
            echo "‚úÖ Rollback verification successful (attempt $i)"
            
            # Check response time is reasonable
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$URL")
            echo "‚è±Ô∏è  Post-rollback response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
              echo "‚úÖ Response time acceptable after rollback"
              exit 0
            else
              echo "‚ö†Ô∏è  Response time still slow after rollback"
            fi
            break
          else
            echo "‚ùå Rollback verification failed (attempt $i/3)"
            if [ $i -lt 3 ]; then
              sleep 30
            fi
          fi
        done
        
        echo "‚ùå Rollback verification failed - manual intervention required"
        exit 1