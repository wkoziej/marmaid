name: Fully Automated CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Common configuration
  NODE_VERSION: '20'
  SUPABASE_CLI_VERSION: '1.200.3'

jobs:
  # Job 1: Basic code quality checks (fast feedback)
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npm run typecheck

      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:unit:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: unittests
          name: unit-tests-coverage

  # Job 2: Database setup and migrations
  database-setup:
    name: Setup Test Database
    runs-on: ubuntu-latest
    needs: code-quality
    environment: test
    outputs:
      database-ready: ${{ steps.migrations.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_CLI_VERSION }}

      - name: Apply migrations to test database
        id: migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_TEST_PROJECT_ID }}
        run: |
          cd supabase
          
          # Link to test project
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Apply migrations
          supabase db push --include-seed=false
          
          # Verify migrations applied successfully
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Validate database schema
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_TEST_PROJECT_ID }}
        run: |
          cd supabase
          
          # Check if required tables exist
          supabase db dump --schema-only > schema.sql
          
          # Verify critical tables
          if ! grep -q "CREATE TABLE.*therapists" schema.sql; then
            echo "‚ùå therapists table not found"
            exit 1
          fi
          
          if ! grep -q "CREATE TABLE.*clients" schema.sql; then
            echo "‚ùå clients table not found"
            exit 1
          fi
          
          if ! grep -q "CREATE.*FUNCTION.*check_table_rls_enabled" schema.sql; then
            echo "‚ùå RLS helper function not found"
            exit 1
          fi
          
          echo "‚úÖ Database schema validation passed"

  # Job 3: Integration tests with real database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, database-setup]
    environment: test
    if: needs.database-setup.outputs.database-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run integration tests
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_TEST_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_TEST_ANON_KEY }}
          CI: true
        run: |
          cd frontend
          npm run test:integration

      - name: Upload integration test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Tests Results
          path: frontend/test-results.xml
          reporter: jest-junit

  # Job 4: End-to-End tests (if integration tests pass)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    environment: test
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Run E2E tests
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_TEST_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_TEST_ANON_KEY }}
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/
          retention-days: 7

  # Job 5: Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    environment: staging
    if: |
      github.ref == 'refs/heads/develop' && 
      github.event_name == 'push' &&
      success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies and build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_STAGING_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_STAGING_ANON_KEY }}
          VITE_ENVIRONMENT: staging
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Apply migrations to staging database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}
        run: |
          cd supabase
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push --include-seed=false

      - name: Deploy to staging
        # Add your deployment method here (Vercel, Netlify, S3, etc.)
        run: |
          echo "Deploying to staging environment..."

  # Job 6: Deploy to production (on main branch with manual approval)  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    environment: production
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies and build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_PROD_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_PROD_ANON_KEY }}
          VITE_ENVIRONMENT: production
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Apply migrations to production database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROD_PROJECT_ID }}
        run: |
          cd supabase
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push --include-seed=false

      - name: Deploy to production
        # Add your deployment method here
        run: |
          echo "Deploying to production environment..."

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          # Add Slack/Discord notification here if needed